{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","time","setTime","start","setStart","wait","setWait","useEffect","unsub$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","Math","floor","slice","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNA0GeA,MArGf,WAAgB,IAAD,EAEaC,mBAAiB,GAF9B,mBAEJC,EAFI,KAEEC,EAFF,OAGeF,oBAAkB,GAHjC,mBAGJG,EAHI,KAGGC,EAHH,OAIaJ,mBAAiB,GAJ9B,mBAIJK,EAJI,KAIEC,EAJF,KAqFX,OAhCAC,qBAAU,WACN,IAAMC,EAAS,IAAIC,IAQnB,OAPAC,YAAS,KACJC,KAAKC,YAAUJ,IACfK,WAAU,WACHV,GACAD,GAAQ,SAAAY,GAAG,OAAIA,EAAM,UAG1B,WACHN,EAAOO,KAAKd,GACZO,EAAOQ,cAGZ,CAACb,IAEJI,qBAAU,WACN,IAAMC,EAAS,IAAIC,IAQnB,OAPAC,YAAS,KACJC,KAAKC,YAAUJ,IACfK,WAAU,WACHR,GACAC,EAAQ,MAGb,WACHE,EAAOO,KAAK,GACZP,EAAOQ,cAGZ,CAACX,IAGA,gCACI,gCACI,kCAAQ,IAAMY,KAAKC,MAAOjB,EAAO,KAAW,KAAKkB,OAAO,GAAxD,SACA,kCAAQ,IAAMF,KAAKC,MAAOjB,EAAO,IAAS,KAAKkB,OAAO,GAAtD,SACA,gCAAQ,IAAMF,KAAKC,MAAOjB,EAAO,IAAQ,KAAKkB,OAAO,QAEzD,gCACI,wBAAQC,QAvFK,WACjBjB,GACAD,EAAQ,GACRE,GAAS,IAETA,GAAS,IAkFL,0BACA,wBAAQgB,QA/EA,WACH,IAATf,GACAC,EAAQ,GAEC,IAATD,IACAC,EAAQ,GACRF,GAAS,KAyEL,kBACA,wBAAQgB,QAtEC,WACjBlB,EAAQ,IAqEA,0BCtFDmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e147c3ae.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Subject} from \"rxjs\";\nimport {interval} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\n\nfunction App() {\n\n    const [time, setTime] = useState<number>(0)\n    const [start, setStart] = useState<boolean>(false)\n    const [wait, setWait] = useState<number>(0)\n\n    const startStopHandler = () => {\n        if (start) {\n            setTime(0)\n            setStart(false)\n        } else {\n            setStart(true)\n        }\n    }\n\n    const waitHandler = () => {\n        if (wait === 0) {\n            setWait(1)\n        }\n        if (wait === 1) {\n            setWait(0)\n            setStart(false)\n        }\n    }\n\n    const resetHandler = () => {\n        setTime(0)\n    }\n\n    /*    useEffect(() => {\n            let interval: number = 0\n            if (start) {\n                interval = setInterval((prevTime: number) => {\n                    setTime(prevTime => prevTime + 10)\n                }, 10)\n            } else {\n                clearInterval(interval)\n            }\n            return () => clearInterval(interval)\n        }, [start])\n\n        useEffect(() => {\n            let interval: number = 0\n            if (wait === 1) {\n                interval = setInterval((p: number) => {\n                    setWait(0)\n                }, 300)\n            } else {\n                clearInterval(interval)\n            }\n            return () => clearInterval(interval)\n        }, [wait])*/\n\n    useEffect(() => {\n        const unsub$ = new Subject()\n        interval(1000)\n            .pipe(takeUntil(unsub$))\n            .subscribe(() => {\n                if (start) {\n                    setTime(val => val + 1000)\n                }\n            })\n        return () => {\n            unsub$.next(time)\n            unsub$.complete()\n\n        }\n    }, [start])\n\n    useEffect(() => {\n        const unsub$ = new Subject()\n        interval(300)\n            .pipe(takeUntil(unsub$))\n            .subscribe(() => {\n                if (wait) {\n                    setWait(0)\n                }\n            })\n        return () => {\n            unsub$.next(0)\n            unsub$.complete()\n\n        }\n    }, [wait])\n\n    return (\n        <div>\n            <div>\n                <span>{('0' + Math.floor((time / 3600000) % 60)).slice(-2)} : </span>\n                <span>{('0' + Math.floor((time / 60000) % 60)).slice(-2)} : </span>\n                <span>{('0' + Math.floor((time / 1000) % 60)).slice(-2)}</span>\n            </div>\n            <div>\n                <button onClick={startStopHandler}>Start / Stop</button>\n                <button onClick={waitHandler}>Wait</button>\n                <button onClick={resetHandler}>Reset</button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}